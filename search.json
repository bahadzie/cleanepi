[{"path":"https://epiverse-trace.github.io/cleanepi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 readepi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"an-overview","dir":"Articles","previous_headings":"","what":"An overview","title":"cleanepi","text":"matter many measures taken, one must always expect messy data real-world, duplicates, errors, incomplete, irrelevant formats. Data cleaning essential step data analysis. allows produce accurate, reliable reproducible results. However, data cleaning significant barrier data analysis takes long time complete. {cleanepi} R package clean, curate, standardize epidemiological data. contains functions perform several data cleaning tasks end-user anticipate performed cluttered dataset. {cleanepi} specifically designed epidemiological data, works data frame-like data structure. vignette provides detailed description functions included package use .","code":"library(\"cleanepi\") library(\"magrittr\")"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"general-data-cleaning-tasks","dir":"Articles","previous_headings":"","what":"General data cleaning tasks","title":"cleanepi","text":"main function {cleanepi} clean_data() can perform following tasks: Scan input data determine percent missing, numeric, character date values every column input data frame. Clean column names convert sensible formats. includes many sub-tasks changing space, dot, hyphen two words underscore; converting camel-cases snake-cases; substituting foreign characters corresponding English characters; splitting long word multiple short words capital characters within, , connecting underscores. Remove empty rows columns. Remove constant columns, .e. columns value across rows. Replace missing entries NA. Checking uniqueness subject IDs. Remove duplicated rows (across columns specific columns). Convert character columns Date column actually contains values type Date extent (default 50% values Date). Detect remove rows subject IDs comply expected format. Perform dictionary-based cleaning: replace keys specific columns corresponding values stored data dictionary file, replace misspelled values closest values dictionary. function clean_data() returns list 2 objects: data: data.frame linelist object cleaned data. report: list reports actions performed given dataset. Note: function visualize report object built next release package.","code":"# IMPORTING THE TEST DATASET test_data       <- readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")) head(test_data) read_input    study_id event_name country_code country_name date.of.admission dateOfBirth read_input 1   PS001P2      day 0            2       Gambia        01/12/2020  06/01/1972 read_input 2   PS002P2      day 0            2       Gambia        28/01/2021  02/20/1952 read_input 3 PS004P2-1      day 0            2       Gambia        15/02/2021  06/15/1961 read_input 4   PS003P2      day 0            2       Gambia        11/02/2021  11/11/1947 read_input 5   P0005P2      day 0            2       Gambia        17/02/2021  09/26/2000 read_input 6   PS006P2      day 0            2       Gambia        17/02/2021         -99 read_input   date_first_pcr_positive_test sex read_input 1                 Dec 01, 2020   1 read_input 2                 Jan 01, 2021   1 read_input 3                 Feb 11, 2021 -99 read_input 4                 Feb 01, 2021   1 read_input 5                 Feb 16, 2021   2 read_input 6                 May 02, 2021   2  # IMPORTING THE DATA DICTIONARY test_dictionary <- readRDS(system.file(\"extdata\", \"test_dictionary.RDS\",                                        package = \"cleanepi\")) # SCAN THE DATA scan_result     <- scan_data(test_data) scan_result scan_data   data_type study_id event_name country_code country_name date.of.admission scan_data 1   missing        0          0            0            0                 0 scan_data 2   numeric        0          0            1            0                 0 scan_data 3      date        0          0            0            0                 1 scan_data 4 character        1          1            0            1                 0 scan_data 5   logical        0          0            0            0                 0 scan_data   dateOfBirth date_first_pcr_positive_test sex scan_data 1         0.0                            0   0 scan_data 2         0.1                            0   1 scan_data 3         0.9                            1   0 scan_data 4         0.0                            0   0 scan_data 5         0.0                            0   0 # DEFINING THE DATA CLEANING PARAMETERS params <- list(   keep                = \"date.of.admission\",   remove_duplicates   = TRUE,   target_columns      = NULL,   replace_missing     = TRUE,   na_comes_as         = \"-99\",   check_timeframe     = TRUE,   timeframe           = as.Date(c(\"1973-05-29\", \"2023-05-29\")),   error_tolerance     = 0.5,   subject_id_col_name = \"study_id\",   subject_id_format   = \"PS000P2\",   prefix              = \"PS\",   suffix              = \"P2\",   range               = c(1L, 100L),   dictionary          = test_dictionary ) # CLEAN THE INPUT DATA FRAME res <- clean_data(   data   = test_data,   params = params ) #>  #> cleaning column names #> replacing missing values with NA #> removing empty rows and columns #> removing constant columns #> standardising date columns #> checking for subject IDs uniqueness #> removing duplicated rows #> checking subject IDs format # PRINT TOP 6 ROWS OF THE CLEANED DATA head(res[[\"data\"]]) #>   study_id date.of.admission date_of_birth date_first_pcr_positive_test    sex #> 1  PS001P2        2020-12-01          <NA>                   2020-12-01   male #> 2  PS002P2        2021-01-28          <NA>                   2021-01-01   male #> 4  PS003P2        2021-02-11          <NA>                   2021-02-01   male #> 6  PS006P2        2021-02-17          <NA>                   2021-05-02 female #> 8  PS008P2        2021-02-22    1976-05-10                   2021-09-20 female #> 9  PS010P2        2021-03-02    1991-09-23                   2021-02-26   male  # SUMMARIZE THE REPORT OBJECT summary(res[[\"report\"]]) #>                        Length Class      Mode      #> modified_column_names   2     data.frame list      #> remove_constant         1     -none-     list      #> standardize_date        2     -none-     list      #> incorrect_subject_id    5     data.table list      #> converted_into_numeric  1     glue       character #> params                 14     -none-     list"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"specific-data-cleaning-tasks","dir":"Articles","previous_headings":"","what":"Specific data cleaning tasks","title":"cleanepi","text":"Data cleaning operations renaming columns, removing empty rows, columns, removing columns values across rows, standardization date columns automatically applied input data. consider implicit data cleaning steps executed default. However, users can call specific functions data cleaning steps separately perform specific task. can also call data cleaning functions individually .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"standardise-columns-of-type-date","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Standardise columns of type Date","title":"cleanepi","text":"default date format R %Y-%m-%d. However, common encounter date values recoded differently . Also, cases column data frame contains values type Date, character others. standardize_date() function offers possibility convert date columns %Y-%m-%d format convert character columns Date percentage date values reach specified threshold. function needs following arguments: data: input dataset (required) date_column_name: vector name column converted (required) format: current format values column. Default NULL (optional) timeframe: expected time frame within date values fall . value outside range set NA. Default NULL (optional) check_timeframe: logical determines whether check date values within given time frame. Default FALSE (optional) report: list contains details date columns standardization process. can output report object another function cleanepi (optional). error_tolerance: minimum percentage values type Date character column interest needed convert Date column. Default 50% .e. 0.5. ⚠️ error_tolerance must used caution. set, percentage date values character column less threshold, column returned . function returns list 2 elements named : data: input dataset (specified) columns converted date condition met. report: list, augmented report list element named standardize_date contains vector transformed column names.","code":"res <- standardize_date(   data             = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                          package = \"cleanepi\")),   date_column_name = \"date_first_pcr_positive_test\",   format           = NULL,   timeframe        = NULL,   check_timeframe  = FALSE,   report           = list(),   error_tolerance  = 0.5 )"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"detect-and-remove-incorrect-subject-ids","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Detect and remove incorrect subject IDs","title":"cleanepi","text":"check_subject_ids() function detects removes rows input dataset subject ID match expected format. function requires following parameters: data: input dataset (required) id_column_name: name column subject IDs (required) format: expected subject IDs format (required) prefix: expected prefix subject IDs (optional) suffix: expected suffix subject IDs (optional) range: expected range numbers subject IDs (optional) remove: Boolean variable default FALSE. TRUE, rows incorrect subject IDs removed. verbose: Boolean variable default FALSE. TRUE, message printed along execution function. report: list contains details detected wrong IDs. can output report object another function cleanepi (optional). function returns list 2 elements named : data: input dataset subset rows bad IDs removed (remove = TRUE). report: list, augmented report list element named incorrect_subject_id contains data.frame detected rows incorrect subject IDs.","code":"# DETECT INCORRECT SUBJECT IDs res <- check_subject_ids(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   id_column_name = \"study_id\",   format         = \"PS000P2\",   prefix         = \"PS\",   suffix         = \"P2\",   range          = c(1L, 100L),   remove         = FALSE,   verbose        = TRUE,   report         = list() ) #>  #> Sample IDs with wrong prefix: #> [1] \"P0005P2\" \"PB500P2\" #>  #> Sample IDs with wrong suffix: #> [1] \"PS004P2-1\" #>  #> Sample IDs with wrong incorrect length: #> [1] \"PS004P2-1\" #>  #> Sample IDs with wrong numbers: #> [1] \"PB500P2\" # DISPLAY ROWS WITH THE INCORRECT SUBJECT IDs res[[\"report\"]][[\"incorrect_subject_id\"]] #>    study_id event_name country_code country_name date.of.admission dateOfBirth #> 5   P0005P2      day 0            2       Gambia        17/02/2021  09/26/2000 #> 7   PB500P2      day 0            2       Gambia        28/02/2021  11/03/1989 #> 3 PS004P2-1      day 0            2       Gambia        15/02/2021  06/15/1961 #>   date_first_pcr_positive_test sex #> 5                 Feb 16, 2021   2 #> 7                 Feb 19, 2021   1 #> 3                 Feb 11, 2021 -99 # DETECT AND REMOVE INCORRECT SUBJECT IDs res <- check_subject_ids(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   id_column_name = \"study_id\",   format         = \"PS000P2\",   prefix         = \"PS\",   suffix         = \"P2\",   range          = c(1L, 100L),   remove         = TRUE,   verbose        = FALSE,   report         = list() )"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"calculate-age","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Calculate age","title":"cleanepi","text":"calculate_age() function calculates ages individuals (either years, months, weeks, days) given date column reference date. takes following arguments: data: input dataset (required) date_column_name: name column age calculated (required) end_date: reference date age calculated age_in: age unit (years, months, weeks, days) default years (optional) function returns input dataset 1 2 extra columns contains, respectively: calculated age specified unit remaining number days.","code":"# CALCULATE INDIVIDUAL AGE FROM THE `dateOfBirth` COLUMN age <- calculate_age(   data             = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                          package = \"cleanepi\")),   date_column_name = \"dateOfBirth\",   end_date         = Sys.Date(),   age_in           = \"months\" ) # DISPLAY THE OUTPUT OBJECT head(age)  # note the last 2 columns #>    study_id event_name country_code country_name date.of.admission dateOfBirth #> 1   PS001P2      day 0            2       Gambia        01/12/2020  1972-06-01 #> 2   PS002P2      day 0            2       Gambia        28/01/2021  1952-02-20 #> 3 PS004P2-1      day 0            2       Gambia        15/02/2021  1961-06-15 #> 4   PS003P2      day 0            2       Gambia        11/02/2021  1947-11-11 #> 5   P0005P2      day 0            2       Gambia        17/02/2021  2000-09-26 #> 6   PS006P2      day 0            2       Gambia        17/02/2021        <NA> #>   date_first_pcr_positive_test sex age_months remainder_days #> 1                 Dec 01, 2020   1        619             30 #> 2                 Jan 01, 2021   1        863             10 #> 3                 Feb 11, 2021 -99        751             16 #> 4                 Feb 01, 2021   1        914             20 #> 5                 Feb 16, 2021   2        280              4 #> 6                 May 02, 2021   2         NA             NA"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"check-date-sequence","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Check date sequence","title":"cleanepi","text":"check_date_sequence() function checks order sequences date event columns makes sure values rows columns comply desired order. example, values date_of_infection, date_of_admission, date_of_death columns order listed . row values order considered wrong eventually removed check_date_sequence() function. function takes following arguments: data: input dataset event_cols: vector names date columns interest. listed expected order occurrence, look like mentioned example : event_cols = c(\"date_of_infection\", \"date_of_admission\", \"date_of_death\" remove_bad_seq: Boolean variable default value false. TRUE, rows incorrect date sequence deleted output object. Otherwise, detected stored report object. report: list contains details detected wrong date sequences. can output report object another function cleanepi. (optional) check_date_sequence() function returns list 2 elements: data: input dataset subset without incorrect rows (remove_bad_seq = TRUE) report: list, augmented report list element named incorrect_date_sequence. turn list 2 elements named : date_sequence (expected order date events) bad_sequence (data.frame rows incorrect date sequences).","code":"# DETECT ROWS WITH INCORRECT DATE SEQUENCE res <- check_date_sequence(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   event_cols     = c(\"date_first_pcr_positive_test\", \"date.of.admission\"),   remove_bad_seq = FALSE,   report         = list() ) # PRINT ROWS WITH INCORRECT DATE SEQUENCE res[[\"report\"]] #> $incorrect_date_sequence #> $incorrect_date_sequence$date_sequence #> date_first_pcr_positive_test < date.of.admission #>  #> $incorrect_date_sequence$bad_sequence #>   study_id event_name country_code country_name date.of.admission dateOfBirth #> 6  PS006P2      day 0            2       Gambia        2021-02-17         -99 #> 8  PS008P2      day 0            2       Gambia        2021-02-22  10/05/1976 #>   date_first_pcr_positive_test sex #> 6                   2021-05-02   2 #> 8                   2021-09-20   2"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"find-duplicated-rows","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Find duplicated rows","title":"cleanepi","text":"find_duplicates() function can used identify duplicated rows input dataset. function takes following arguments: data: input dataset target_columns: vector column names indexes duplicated rows identified. NULL, duplicates detected across columns. input dataset linelist object, can set tags identify duplicates across tagged variables . function returns duplicated rows dataset based specified columns. Two extra columns: row_id group_id added dataset, represent, respectively, row numbers duplicated rows input dataset duplicated group ID assigned , every group set values columns interest.","code":"# IMPORT A `linelist` DATA data <- readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                             package = \"cleanepi\")) head(data) #> # A tibble: 6 × 15 #>   id      age age_class sex   place_infect    reporting_ctry loc_hosp dt_onset   #>   <chr> <int> <chr>     <fct> <fct>           <fct>          <fct>    <date>     #> 1 SK_1     68 60-69     M     Middle East     South Korea    Pyeongt… 2015-05-11 #> 2 SK_2     63 60-69     F     Outside Middle… South Korea    Pyeongt… 2015-05-18 #> 3 SK_3     76 70-79     M     Outside Middle… South Korea    Pyeongt… 2015-05-20 #> 4 SK_4     46 40-49     F     Outside Middle… South Korea    Pyeongt… 2015-05-25 #> 5 SK_5     50 50-59     M     Outside Middle… South Korea    365 Yeo… 2015-05-25 #> 6 SK_6     71 70-79     M     Outside Middle… South Korea    Pyeongt… 2015-05-24 #> # ℹ 7 more variables: dt_report <date>, week_report <fct>, dt_start_exp <date>, #> #   dt_end_exp <date>, dt_diag <date>, outcome <fct>, dt_death <date> # SHOW THE TAGGED VARIABLES linelist::tags(data) #> $date_onset #> [1] \"dt_onset\" #>  #> $date_reporting #> [1] \"dt_report\" #>  #> $gender #> [1] \"sex\" #>  #> $outcome #> [1] \"outcome\" # FIND DUPLICATES ACROSS TAGGED VARIABLES dups <- find_duplicates(   data           = data,   target_columns = \"tags\" ) # VISUALIZE THE DUPLICATES head(dups %>% dplyr::select(c(row_id, group_id,                               as.character(linelist::tags(data))))) #> # A tibble: 6 × 6 #> # Groups:   dt_onset, dt_report, sex, outcome [3] #>   row_id group_id dt_onset   dt_report  sex   outcome #>    <int>    <int> <date>     <date>     <fct> <fct>   #> 1     26        1 2015-05-21 2015-06-03 M     Alive   #> 2     33        1 2015-05-21 2015-06-03 M     Alive   #> 3     55        2 2015-05-30 2015-06-06 M     Alive   #> 4     62        2 2015-05-30 2015-06-06 M     Alive   #> 5     23        3 2015-05-31 2015-06-02 M     Dead    #> 6     24        3 2015-05-31 2015-06-02 M     Dead"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"remove-duplicates","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Remove duplicates","title":"cleanepi","text":"remove duplicated rows, use remove_duplicates() function. internally calls find_duplicates() function expects following parameters: data: input dataset target_columns: vector column names indexes duplicated rows identified. NULL, duplicates detected across columns. f input dataset linelist object, can set tags identify duplicates across tagged variables . remove: numeric vector indices duplicated rows removed. NULL, duplicates removed first occurrence duplicated rows kept. report: list contains details duplicates removal process. can output report object another function cleanepi (optional). function returns inputs dataset without duplicated rows list outcomes duplicates removal operation. turn list named remove_duplicates 3 elements: all_dups: subset input dataset duplicated rows detected using find_duplicates() function. removed_dups: subset input dataset removed. duplicates_checked_from: comma-separated string column names used identify duplicated rows. output find_duplicates() function can also passed remove_duplicates() function specify duplicated rows removed.","code":"# IMPORT A `linelist` DATA data <- readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                             package = \"cleanepi\"))  # REMOVE DUPLICATES ACROSS TAGGED VARIABLES (KEEP ONLY THE FIRST OCCURENCE OF # THE DUPLICATED ROWS) res <- remove_duplicates(   data           = data,   target_columns = \"tags\",   remove         = NULL,   report         = list() ) # STORE THE DUPLICATES REMOVAL PROCESS REPORT IN A VARIABLE dups_removal_report <- res[[\"report\"]][[\"remove_duplicates\"]]  # DISPLAY ALL DUPLICATES FOUND head(dups_removal_report[[\"all_dups\"]] %>%        dplyr::select(c(row_id, group_id, as.character(linelist::tags(data))))) #> # A tibble: 6 × 6 #> # Groups:   dt_onset, dt_report, sex, outcome [3] #>   row_id group_id dt_onset   dt_report  sex   outcome #>    <int>    <int> <date>     <date>     <fct> <fct>   #> 1     26        1 2015-05-21 2015-06-03 M     Alive   #> 2     33        1 2015-05-21 2015-06-03 M     Alive   #> 3     55        2 2015-05-30 2015-06-06 M     Alive   #> 4     62        2 2015-05-30 2015-06-06 M     Alive   #> 5     23        3 2015-05-31 2015-06-02 M     Dead    #> 6     24        3 2015-05-31 2015-06-02 M     Dead  # DISPLAY THE DUPLICATED LINES THAT WAS REMOVED head(dups_removal_report[[\"removed_dups\"]] %>%        dplyr::select(c(row_id, group_id, as.character(linelist::tags(data))))) #> # A tibble: 6 × 6 #> # Groups:   dt_onset, dt_report, sex, outcome [6] #>   row_id group_id dt_onset   dt_report  sex   outcome #>    <int>    <int> <date>     <date>     <fct> <fct>   #> 1     33        1 2015-05-21 2015-06-03 M     Alive   #> 2     62        2 2015-05-30 2015-06-06 M     Alive   #> 3     24        3 2015-05-31 2015-06-02 M     Dead    #> 4    105        4 2015-05-31 2015-06-09 M     Alive   #> 5     31        5 2015-06-01 2015-06-03 M     Alive   #> 6     60        6 2015-06-01 2015-06-06 F     Alive  # DISPLAY COLUMN NAMES USED TO DETECT DUPLICATES dups_removal_report[[\"duplicates_checked_from\"]] #> dt_onset, dt_report, sex, outcome # DETECT DUPLICATES FROM TAGGED COLUMNS dups <- find_duplicates(   data           = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                                        package = \"cleanepi\")),   target_columns = \"tags\" )  # REMOVE FIRST OCCURRENCE OF DUPLICATED ROWS dups_index_to_remove <- dups[[\"row_id\"]][seq(1L, nrow(dups), 2L)] no_dups <- remove_duplicates(   data           = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                                        package = \"cleanepi\")),   target_columns = \"tags\",   remove         = dups_index_to_remove,   report         = list() )"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/cleanepi.html","id":"clean-data-based-on-dictionary","dir":"Articles","previous_headings":"Specific data cleaning tasks","what":"Clean data based on dictionary","title":"cleanepi","text":"columns data frame linelist contain values represents different options proposed study participants. complete labels options generally stored called data dictionary file. Note dictionary files usually contain information needed understanding input dataset. clean_using_dictionary() function can used replace options corresponding values stored data dictionary. takes input data frame correspondent dictionary inputs. structure data dictionary expected matchmaker package. Note dictionary fit {matchmaker} clean_using_dictionary() makes call functions package. common options input data defined dictionary. Use add_to_dictionnary() function define data dictionary. example , -99 defined data dictionary .","code":"test_dictionary display_dictionary   options values grp orders display_dictionary 1       1   male sex      1 display_dictionary 2       2 female sex      2 ## READING IN THE DATA data <- readRDS(system.file(\"extdata\", \"test_df.RDS\",                             package = \"cleanepi\"))  ## ADD THE EXTRA OPTION TO THE DICTIONARY test_dictionary <- add_to_dictionnary(test_dictionary,                                       option = \"-99\",                                       value  = \"unknow\",                                       grp    = \"sex\",                                       order  = NULL) test_dictionary #>   options values grp orders #> 1       1   male sex      1 #> 2       2 female sex      2 #> 3     -99 unknow sex      3 cleaned_df <- clean_using_dictionary(   data       = data,   dictionary = test_dictionary )  cleaned_df dictionary-base_cleaning     study_id event_name country_code country_name date.of.admission dateOfBirth dictionary-base_cleaning 1    PS001P2      day 0            2       Gambia        01/12/2020  06/01/1972 dictionary-base_cleaning 2    PS002P2      day 0            2       Gambia        28/01/2021  02/20/1952 dictionary-base_cleaning 3  PS004P2-1      day 0            2       Gambia        15/02/2021  06/15/1961 dictionary-base_cleaning 4    PS003P2      day 0            2       Gambia        11/02/2021  11/11/1947 dictionary-base_cleaning 5    P0005P2      day 0            2       Gambia        17/02/2021  09/26/2000 dictionary-base_cleaning 6    PS006P2      day 0            2       Gambia        17/02/2021         -99 dictionary-base_cleaning 7    PB500P2      day 0            2       Gambia        28/02/2021  11/03/1989 dictionary-base_cleaning 8    PS008P2      day 0            2       Gambia        22/02/2021  10/05/1976 dictionary-base_cleaning 9    PS010P2      day 0            2       Gambia        02/03/2021  09/23/1991 dictionary-base_cleaning 10   PS011P2      day 0            2       Gambia        05/03/2021  02/08/1991 dictionary-base_cleaning    date_first_pcr_positive_test    sex dictionary-base_cleaning 1                  Dec 01, 2020   male dictionary-base_cleaning 2                  Jan 01, 2021   male dictionary-base_cleaning 3                  Feb 11, 2021 unknow dictionary-base_cleaning 4                  Feb 01, 2021   male dictionary-base_cleaning 5                  Feb 16, 2021 female dictionary-base_cleaning 6                  May 02, 2021 female dictionary-base_cleaning 7                  Feb 19, 2021   male dictionary-base_cleaning 8                  Sep 20, 2021 female dictionary-base_cleaning 9                  Feb 26, 2021   male dictionary-base_cleaning 10                 Mar 03, 2021 female"},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"concept-and-motivation","dir":"Articles","previous_headings":"","what":"Concept and motivation","title":"Package Design vignette for {cleanepi}","text":"document outline design decisions guide development strategies {cleanepi} R package, well reasoning, possible pros cons decision. data cleaning represents important step success downstream analysis. steps involved cleaning process vary depending data type research goal. , however, steps can performed across almost data types, independently source data.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"design-decisions","dir":"Articles","previous_headings":"","what":"Design decisions","title":"Package Design vignette for {cleanepi}","text":"{cleanepi} R package developed provide functional programming-style data cleansing tasks. classified data cleaning operations several categories, call modules. division based general goals data cleaning procedures generally expected end users. module one main function helper functions achieve specific task. However, main function module exported. provide users ability perform cleaning task individually needed.  heart {cleanepi}, clean_data(), wrapper around modules (see Figure @fig:1). expect main function called users clean data. considered cleaning actions implicit (performed whether user specified ), others explicit (performed user’s request). also two surrogate functions: scan_data() assess data types found every column, print_report() display report made every applied cleaning task.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"scope","dir":"Articles","previous_headings":"","what":"Scope","title":"Package Design vignette for {cleanepi}","text":"{cleanepi} R package designed clean, curate, standardize tabular datasets, emphasis epidemiological data particular. primary function {cleanepi} clean_data(), accepts input intended dataset form data.frame linelist object list operations performed dataset. implementation {cleanepi}, operations translated modules. Modules current version {cleanepi} include : standardization column names, removal duplicates, replacement missing values NA, standardization subject IDs, standardization date values, replacement existing values pre-defined ones, conversion values required, transformation columns.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Package Design vignette for {cleanepi}","text":"main functions {cleanepi} return object type data.frame linelist. report made cleaning tasks attached data.frame attribute can accessed using attr() function base R.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"modules-in-cleanepi","dir":"Articles","previous_headings":"Output","what":"Modules in {cleanepi}","title":"Package Design vignette for {cleanepi}","text":"section, provide detailed description way every module built. 1. Column names standardization module contains functions harmonize style format column names target dataset, optionally allows users specify subset focal columns .e. list column names keep -. main function: standardize_column_names() Input: data.frame linelist object; vector focal column names (provided, columns checked eventual standardization). Output: input object standardized column names. Report: two-column table initial current column names updated column original dataset. Mode: implicit. 2. Duplicates removal module contains functions remove duplicated rows, columns, constant columns. main function: remove_duplicates() Input: data.frame linelist object; vector target columns (default option consider columns); remove empty rows (rows default), remove empty columns (columns default), remove constant. columns (constant columns default). Output: input object effects specified operations. Report: ● two-column table items values. Items include empty rows, empty columns, constant columns. ● table removed duplicates. Mode: implicit. 3. Replacement missing values NA module standardize unify text representing missing values dataset. main function: replace_missing_char() Input: data.frame linelist object; vector column names (provided, operation performed across columns); string specifying missing values (default value null). Output: input object missing values represented NA. Report: three-column table index, column value missing item dataset. Mode: implicit. 4. Date values standardization module functions standardize format dated-value columns ensure dates inside given timeframe. main function: standardize_dates() Input: data.frame linelist object; vector targeted date columns (provides, automatically figure columns date-values), tolerance_threshold (default value 50%), format (default value NULL), timeframe (default value null). Output: input object standardized date values (form yyyy-mm-dd). Report: ● two-column table list columns date values standardized. ● three-column table index, column name, values specified timeframe. Mode: implicit. 5. Subject IDs standardization functions module designed check whether values column unique identifies subjects format. main function: check_subject_ids() Input: data.frame linelist object; name id column; strings prefix, suffix, numerical range within ids. Output: input object standardize subject ids. Report: two-column table index value subject id comply expected format. Mode: explicit. 6. Dictionary based substitution  standardizes entries specific columns certain values, replacing 1 male 2 female gender column. also interoperable get_meta_data() function {readepi}. main function: clean_using_dictionary() Input: data.frame linelist object; data dictionary following column names: options, values, column, order. Output: input object specified options replaced provided values. Report: three-column table index, column value unexpected value found targeted column. Mode: explicit. Note clean_using_dictionary() function return warning detects unexpected values target columns specified data dictionary. unexpected values can added data dictionary using add_to_dictionary() function. 7. Conversion  module contains functions convert numbers written letters numerical values, interoperable {numberize} package. main function: convert_to_numeric() Input: data.frame linelist object; vector column names converted numeric; output scan_data() function. Output: input object values target columns converted numeric. Report: three-column table index, column value unrecognized value dataset (strings converted numeric). Mode: explicit. Note convert_to_numeric() issue warning unexpected values return report. 8. Transformation  used various specialized operations related epidemiological data analytics. current implementation includes following functions. main function: calculate_age_in() Input: data.frame linelist object; name column interest; reference date; time unit (possible values days, weeks, months, years). Output: input object clean data additional age column values intended time unit. Report: none. Mode: explicit.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"surrogate-functions","dir":"Articles","previous_headings":"Output","what":"Surrogate functions","title":"Package Design vignette for {cleanepi}","text":"also two surrogate functions: scan_data() providing quick summary data, including percentage values type character, numeric, missing, logical, date every column, print_report() displaying reports cleaning operations performed dataset.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"dependencies","dir":"Articles","previous_headings":"","what":"Dependencies","title":"Package Design vignette for {cleanepi}","text":"modules surrogate functions depend mainly following packages: {numberize}, {dplyr}, {maggritr}, {linelist}, {janitor}, {matchmaker}, {lubridate}, {epitrix}, {arsenal}, {naniar}, {glue}, {stringr}, {snakecase}, {readr}, {R.utils}. functions require packages needed package development process including: {checkmate}, {kableExtra}, {bookdown}, {rmarkdown}, {testthat} (>= 3.0.0), {knitr}, {lintr}","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/articles/design_principle.html","id":"contribute","dir":"Articles","previous_headings":"","what":"Contribute","title":"Package Design vignette for {cleanepi}","text":"special requirements contributing {cleanepi}, please follow package contributing guide.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Karim Mané. Author, maintainer. Thibaut Jombart. Copyright holder. Bubacarr Bah. Contributor. Bankolé Ahadzie. Contributor. Nuredin Mohammed. Contributor. Abdoelnaser Degoot. Contributor. Hugo Gruson. Reviewer.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mané K (2024). cleanepi: Clean standardize epidemiological data. R package version 0.0.2, https://github.com/epiverse-trace/cleanepi, https://epiverse-trace.github.io/cleanepi.","code":"@Manual{,   title = {cleanepi: Clean and standardize epidemiological data},   author = {Karim Mané},   year = {2024},   note = {R package version 0.0.2, https://github.com/epiverse-trace/cleanepi},   url = {https://epiverse-trace.github.io/cleanepi}, }"},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"cleanepi-clean-and-standardize-epidemiological-data-","dir":"","previous_headings":"","what":"Clean and standardize epidemiological data","title":"Clean and standardize epidemiological data","text":"cleanepi R package clean, curate, standardize epidemiological data. cleanepi performs several data cleaning tasks end-user anticipate performed cluttered dataset. include standard tasks : removing duplicated empty rows columns, removing columns constant values, replacing missing value strings NA, ensuring uniqueness uniquely identified columns, converting character columns Date certain conditions, etc. cleanepi can also standardize column entries specified formats, calculates age (years, months, weeks, days) given Date column reference date. cleanepi expects input data form data frame-like structure (data.frame, tibble, etc) linelist object returns processed data type. also returns object type list reports outcomes every cleaning task. cleanepi developed Epiverse-TRACE team Medical Research Council Gambia unit London School Hygiene Tropical Medicine.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clean and standardize epidemiological data","text":"latest development version cleanepi can installed GitHub.","code":"if (!require(\"pak\")) install.packages(\"pak\") pak::pak(\"epiverse-trace/cleanepi\") library(cleanepi)"},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Clean and standardize epidemiological data","text":"main function cleanepi clean_data(), internally makes call almost standard data cleaning functions, removal empty duplicated rows columns, replacement missing values, etc. However, function can also called independently perform specific task. mechanism explained details vignette. typical example use clean_data() function.","code":"# READING IN THE TEST DATASET test_data       <- readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")) print(test_data) #>     study_id event_name country_code country_name date.of.admission dateOfBirth #> 1    PS001P2      day 0            2       Gambia        01/12/2020  06/01/1972 #> 2    PS002P2      day 0            2       Gambia        28/01/2021  02/20/1952 #> 3  PS004P2-1      day 0            2       Gambia        15/02/2021  06/15/1961 #> 4    PS003P2      day 0            2       Gambia        11/02/2021  11/11/1947 #> 5    P0005P2      day 0            2       Gambia        17/02/2021  09/26/2000 #> 6    PS006P2      day 0            2       Gambia        17/02/2021         -99 #> 7    PB500P2      day 0            2       Gambia        28/02/2021  11/03/1989 #> 8    PS008P2      day 0            2       Gambia        22/02/2021  10/05/1976 #> 9    PS010P2      day 0            2       Gambia        02/03/2021  09/23/1991 #> 10   PS011P2      day 0            2       Gambia        05/03/2021  02/08/1991 #>    date_first_pcr_positive_test sex #> 1                  Dec 01, 2020   1 #> 2                  Jan 01, 2021   1 #> 3                  Feb 11, 2021 -99 #> 4                  Feb 01, 2021   1 #> 5                  Feb 16, 2021   2 #> 6                  May 02, 2021   2 #> 7                  Feb 19, 2021   1 #> 8                  Sep 20, 2021   2 #> 9                  Feb 26, 2021   1 #> 10                 Mar 03, 2021   2 # READING IN THE DATA DICTIONARY test_dictionary <- readRDS(system.file(\"extdata\", \"test_dictionary.RDS\",                                        package = \"cleanepi\")) print(test_dictionary) #>   options values grp orders #> 1       1   male sex      1 #> 2       2 female sex      2 # DEFINING THE CLEANING PARAMETERS params <- list(   remove_duplicates   = TRUE,   target_columns      = NULL,    replace_missing     = TRUE,   na_comes_as         = \"-99\",   check_timeframe     = TRUE,   timeframe           = as.Date(c(\"1973-05-29\", \"2023-05-29\")),   error_tolerance     = 0.5,   subject_id_col_name = \"study_id\",   subject_id_format   = \"PS000P2\",   prefix              = \"PS\",   suffix              = \"P2\",   range               = c(1, 100),   keep                = \"date.of.admission\",   dictionary          = test_dictionary )  # PERFORMING THE DATA CLEANING res <- clean_data(   data   = test_data,   params = params ) #>  #> cleaning column names #> replacing missing values with NA #> removing empty rows and columns #> removing constant columns #> standardising date columns #> checking for subject IDs uniqueness #> removing duplicated rows #> checking subject IDs format  cleaned_data    <- res$data cleaning_report <- res$report  # VISUALISE THE CLEANED DATASET print(cleaned_data) #>    study_id date.of.admission date_of_birth date_first_pcr_positive_test    sex #> 1   PS001P2        2020-12-01          <NA>                   2020-12-01   male #> 2   PS002P2        2021-01-28          <NA>                   2021-01-01   male #> 4   PS003P2        2021-02-11          <NA>                   2021-02-01   male #> 6   PS006P2        2021-02-17          <NA>                   2021-05-02 female #> 8   PS008P2        2021-02-22    1976-05-10                   2021-09-20 female #> 9   PS010P2        2021-03-02    1991-09-23                   2021-02-26   male #> 10  PS011P2        2021-03-05    1991-08-02                   2021-03-03 female"},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Clean and standardize epidemiological data","text":"","code":"browseVignettes(\"cleanepi\")"},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"next-steps","dir":"","previous_headings":"","what":"Next steps","title":"Clean and standardize epidemiological data","text":"✅ update create test files✅ build function display cleaning report","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"lifecycle","dir":"","previous_headings":"Next steps","what":"Lifecycle","title":"Clean and standardize epidemiological data","text":"package currently experimental, defined RECON software lifecycle. means functional, interfaces functionalities may change time, testing documentation may lacking.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"contributions","dir":"","previous_headings":"Next steps","what":"Contributions","title":"Clean and standardize epidemiological data","text":"Contributions welcome via pull requests.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"code-of-conduct","dir":"","previous_headings":"Next steps","what":"Code of Conduct","title":"Clean and standardize epidemiological data","text":"Please note cleanepi project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/index.html","id":"citing-this-package","dir":"","previous_headings":"","what":"Citing this package","title":"Clean and standardize epidemiological data","text":"","code":"citation(\"cleanepi\") #> To cite package 'cleanepi' in publications use: #>  #>   Mané K (2023). _cleanepi: Data Cleaning Package_. R package version #>   0.0.2. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {cleanepi: Data Cleaning Package}, #>     author = {Karim Mané}, #>     year = {2023}, #>     note = {R package version 0.0.2}, #>   }"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionnary.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an element to the data dictionary — add_to_dictionnary","title":"Add an element to the data dictionary — add_to_dictionnary","text":"Add element data dictionary","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionnary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an element to the data dictionary — add_to_dictionnary","text":"","code":"add_to_dictionnary(dictionary, option, value, grp, order = NULL)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionnary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an element to the data dictionary — add_to_dictionnary","text":"dictionary data frame data dictionary option character new option add dictionary value character value new option replaced grp character name column contains option interest order numeric order new option","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionnary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an element to the data dictionary — add_to_dictionnary","text":"object type data frame. new data dictionary additional line contains details new options.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/add_to_dictionnary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an element to the data dictionary — add_to_dictionnary","text":"","code":"test <- add_to_dictionnary(   dictionary = readRDS(system.file(\"extdata\", \"test_dict.RDS\",                        package = \"cleanepi\")),   option     = \"ml\",   value      = \"male\",   grp        = \"gender\",   order      = NULL  )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/calculate_age.html","id":null,"dir":"Reference","previous_headings":"","what":"function to calculate age from date of birth — calculate_age","title":"function to calculate age from date of birth — calculate_age","text":"function calculate age date birth","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/calculate_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to calculate age from date of birth — calculate_age","text":"","code":"calculate_age(   data,   date_column_name = NULL,   end_date = Sys.Date(),   age_in = \"years\" )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/calculate_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to calculate age from date of birth — calculate_age","text":"data data frame date column standardise date_column_name name date column interest. default: 'Date', , 'DATE', 'date' end_date end date. default: today's date age_in character string specify whether calculate age 'years', 'months', 'days', 'weeks'. default : 'years'","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/calculate_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function to calculate age from date of birth — calculate_age","text":"data frame 1 2 extra columns compared input data frame \"age_years\", \"age_months\", \"age_weeks\", \"age_days\", depending value 'age_in' parameter \"remainder_days\": column number remaining days age converted weeks months","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/calculate_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"function to calculate age from date of birth — calculate_age","text":"","code":"age <- calculate_age( data = readRDS(system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\")), date_column_name = \"dateOfBirth\", end_date = Sys.Date(), age_in = \"months\" )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the sequence of event dates — check_date_sequence","title":"Check the sequence of event dates — check_date_sequence","text":"function used check whether date sequence specified columns correct .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the sequence of event dates — check_date_sequence","text":"","code":"check_date_sequence(data, event_cols, remove_bad_seq = FALSE, report = list())"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the sequence of event dates — check_date_sequence","text":"data input data frame event_cols vector comma-separated list event columns names. Users specify least 2 column names expected order. example: event_cols = c(\"DS\", \"DH\", \"DD\") DS=date symptoms onset, DH=date hospitalization, DD=date death remove_bad_seq Boolean specify rows incorrect order filtered . default FALSE report object contains details result date columns standardization","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the sequence of event dates — check_date_sequence","text":"rows input data frame incorrect date sequence remove_bad_seq = FALSE, input data frame without rows ","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_date_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the sequence of event dates — check_date_sequence","text":"","code":"good_date_sequence <- check_date_sequence( data = readRDS(system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\")), event_cols = c(\"date_first_pcr_positive_test\", \"date.of.admission\"), remove_bad_seq = FALSE, report = list() )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_ids_uniqueness.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the uniqueness in values of the sample IDs column — check_ids_uniqueness","title":"Check the uniqueness in values of the sample IDs column — check_ids_uniqueness","text":"Check uniqueness values sample IDs column","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_ids_uniqueness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the uniqueness in values of the sample IDs column — check_ids_uniqueness","text":"","code":"check_ids_uniqueness(data, id_col_name, report = list())"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_ids_uniqueness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the uniqueness in values of the sample IDs column — check_ids_uniqueness","text":"data input data frame id_col_name name column contains sample IDs report object contains details result date columns standardization.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_ids_uniqueness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the uniqueness in values of the sample IDs column — check_ids_uniqueness","text":"report object type list. contain element named duplicated_ids. either data.frame rows duplicated IDs NULL .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_ids_uniqueness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the uniqueness in values of the sample IDs column — check_ids_uniqueness","text":"","code":"if (FALSE) { report <- check_ids_uniqueness( data = readRDS(system.file(\"extdata\", \"messy_data.RDS\",     package = \"cleanepi\")), id_col_name = \"case_id\", ) }"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the subject IDs comply with the expected format — check_subject_ids","title":"Check whether the subject IDs comply with the expected format — check_subject_ids","text":"Check whether subject IDs comply expected format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the subject IDs comply with the expected format — check_subject_ids","text":"","code":"check_subject_ids(   data,   format,   id_column_name = NULL,   prefix = NULL,   suffix = NULL,   range = NULL,   remove = FALSE,   verbose = FALSE,   report = list() )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the subject IDs comply with the expected format — check_subject_ids","text":"data data frame interest format expected subject IDs format id_column_name name column subject IDs. specified, first column considered default prefix prefix used subject IDs suffix prefix used subject IDs range vector range numbers sample IDs remove Boolean specify whether remove rows incorrect verbose Boolean specify whether print detected incorrect subject IDs report report object","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the subject IDs comply with the expected format — check_subject_ids","text":"found, function return list 2 elements: cleaned data frame correct subject IDs report containing rows input data frame incorrect subject IDs","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/check_subject_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether the subject IDs comply with the expected format — check_subject_ids","text":"","code":"dat <- check_subject_ids(   data           = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                        package = \"cleanepi\")),   id_column_name = \"study_id\",   format         = \"PS000P2\",   prefix         = \"PS\",   suffix         = \"P2\",   range          = c(1, 100),   remove         = FALSE,   verbose        = TRUE,   report         = list() ) #>  #> Sample IDs with wrong prefix: #> [1] \"P0005P2\" \"PB500P2\" #>  #> Sample IDs with wrong suffix: #> [1] \"PS004P2-1\" #>  #> Sample IDs with wrong incorrect length: #> [1] \"PS004P2-1\" #>  #> Sample IDs with wrong numbers: #> [1] \"PB500P2\""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean data — clean_data","title":"Clean data — clean_data","text":"function used clean messy data frames. include cleaning column names, detecting removing duplicates, empty records columns, constant columns, replacing missing values NA, converting character columns Date contain certain number Date values, detecting subject IDs wrong format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean data — clean_data","text":"","code":"clean_data(   data,   params = list(keep = NULL, remove_duplicates = FALSE, target_columns = NULL,     replace_missing = TRUE, na_comes_as = NULL, check_timeframe = FALSE, timeframe =     NULL, error_tolerance = 0.5, subject_id_col_name = NULL, subject_id_format = NULL,     prefix = NULL, suffix = NULL, range = NULL, dictionary = NULL) )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean data — clean_data","text":"data input data frame params list parameters define cleaning operations applied input data. Possible parameters : remove_duplicates: whether remove duplicated records . TRUE, remove argument remove_duplicate() function automatically set -1 .e. keep first instance duplicated rows. user needs detect duplicated rows dataset, use find_duplicates() function. target_columns: vector columns names indices consider looking duplicates. input data linelist object, parameter can set tags wish look duplicates across tagged variables . used remove_duplicates=TRUE replace_missing: whether replace missing value characters NA . default FALSE na_comes_as: characters represent missing values data frame. used replace_missing=TRUE check_timeframe: logical determine whether check dates fall given time frame . default: FALSE timeframe: vector 2 elements Date class specifies first last date. provided, Dates data frame must within range set NA cleaning. error_tolerance: number 0 1 indicating proportion entries identified dates tolerated; proportion exceeded, original vector returned, message issued; defaults 0.1 (10 percent) subject_id_col_name: name column data frame subject IDs subject_id_format: expected subject format prefix: prefix used subject IDs suffix: prefix used subject IDs range: vector range numbers subject IDs dictionary: object type data frame. data dictionary used clean specified columns. Use ?clean_using_dictionary details. range: vector range numbers sample IDs keep: vector column names kept appear original data. default NULL","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean data — clean_data","text":"list following 2 elements: data: cleaned data frame according user-specified parameters report: object type list details every cleaning operation.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean data — clean_data","text":"check_timeframe = TRUE timeframe = NULL, timeframe today's date date 50 years . clean_data(), duplicated rows identified across user-specified columns. detected, occurrences duplicated rows removed except first. need find remove specific duplicates, use find_duplicates() remove_duplicates() functions.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean data — clean_data","text":"","code":"cleaned_data <- clean_data(   data   = readRDS(system.file(\"extdata\", \"test_df.RDS\",                                package = \"cleanepi\")),   params = list(     keep                = NULL,     remove_duplicates   = TRUE,     target_columns      = NULL,     replace_missing     = TRUE,     na_comes_as         = \"-99\",     check_timeframe     = TRUE,     timeframe           = as.Date(c(\"1973-05-29\", \"2023-05-29\")),     error_tolerance     = 0.5,     subject_id_col_name = \"study_id\",     subject_id_format   = \"PS000P2\",     prefix              = \"PS\",     suffix              = \"P2\",     range               = c(1, 100),     dictionary          = NULL)) #>  #> cleaning column names #> replacing missing values with NA #> removing empty rows and columns #> removing constant columns #> standardising date columns #> checking for subject IDs uniqueness #> removing duplicated rows #> checking subject IDs format"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform dictionary-based cleaning — clean_using_dictionary","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"Perform dictionary-based cleaning","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"","code":"clean_using_dictionary(data, dictionary)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"data input data dictionary data frame data dictionary associated input data. format","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"data frame cleaned values target columns specified data dictionary.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/clean_using_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform dictionary-based cleaning — clean_using_dictionary","text":"","code":"cleaned_df <- clean_using_dictionary(   data       = readRDS(system.file(\"extdata\", \"messy_data.RDS\",                        package = \"cleanepi\")),   dictionary = readRDS(system.file(\"extdata\", \"test_dict.RDS\",                        package = \"cleanepi\")) )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/cleanepi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cleanepi: Clean and standardize epidemiological data — cleanepi-package","title":"cleanepi: Clean and standardize epidemiological data — cleanepi-package","text":"cleanepi contains functions used epidemiological data cleaning standardization.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/cleanepi/reference/cleanepi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cleanepi: Clean and standardize epidemiological data — cleanepi-package","text":"Maintainer: Karim Mané karim.mane@lshtm.ac.uk (ORCID) contributors: Thibaut Jombart thibautjombart@gmail.com [copyright holder] Bubacarr Bah Bubacarr.Bah1@lshtm.ac.uk (ORCID) [contributor] Bankolé Ahadzie Bankole.Ahadzie@lshtm.ac.uk [contributor] Nuredin Mohammed Nuredin.Mohammed@lshtm.ac.uk [contributor] Abdoelnaser Degoot abdoelnaser-mahmood.degoot@lshtm.ac.uk [contributor] Hugo Gruson hugo@data.org (ORCID) [reviewer]","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_numeric_to_date.html","id":null,"dir":"Reference","previous_headings":"","what":"convert numeric into Date — convert_numeric_to_date","title":"convert numeric into Date — convert_numeric_to_date","text":"convert numeric Date","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_numeric_to_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert numeric into Date — convert_numeric_to_date","text":"","code":"convert_numeric_to_date(data, numeric_date_columns, ref_date, forward = TRUE)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_numeric_to_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert numeric into Date — convert_numeric_to_date","text":"data input data frame numeric_date_columns vector comma-separated list columns names converted numeric date ref_date reference date forward whether counts started reference date (TRUE) (FALSE). default FALSE","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/convert_numeric_to_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert numeric into Date — convert_numeric_to_date","text":"input data frame column interest updated","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"Identify return duplicated rows data frame linelist.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"","code":"find_duplicates(data, target_columns)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"data input data frame linelist. target_columns vector columns names indices consider looking duplicates. input data linelist object, parameter can set tags wish look duplicates across tagged variables .","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"Data frame linelist duplicated rows following 2 additional columns: row_id: indices duplicated rows input data. Users can choose indices, row consider redundant group duplicates. group_id: unique identifier associated group duplicates.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/find_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify and return duplicated rows in a data frame or linelist. — find_duplicates","text":"","code":"dups <- find_duplicates(   data = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",     package = \"cleanepi\")),   target_columns = c(\"dt_onset\", \"dt_report\", \"sex\", \"outcome\") )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicates based on selected columns from a data frame\nor linelist object. — remove_duplicates","title":"Remove duplicates based on selected columns from a data frame\nor linelist object. — remove_duplicates","text":"Remove duplicates based selected columns data frame linelist object.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicates based on selected columns from a data frame\nor linelist object. — remove_duplicates","text":"","code":"remove_duplicates(data, target_columns, remove = NULL, report = list())"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicates based on selected columns from a data frame\nor linelist object. — remove_duplicates","text":"data input data frame. target_columns vector column names use looking duplicates. input data linelist object, parameter can set tags wish look duplicates tagged columns. remove vector duplicate indices removed. Duplicate indices unique identifiers rows original data frame linelist duplicates based target_columns. remove = NULL (default value), first duplicate kept rest duplicates group removed. report list information effects cleaning steps.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicates based on selected columns from a data frame\nor linelist object. — remove_duplicates","text":"list elements data (filtered dataset) report.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/remove_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicates based on selected columns from a data frame\nor linelist object. — remove_duplicates","text":"","code":"no_dups <- remove_duplicates(   data           = readRDS(system.file(\"extdata\", \"test_linelist.RDS\",                              package = \"cleanepi\")),   target_columns = \"tags\",   remove         = NULL,   report         = list() )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Scan a data frame object to determine the percentage of missing, numeric,\nDate, character, logical values in every column. — scan_data","title":"Scan a data frame object to determine the percentage of missing, numeric,\nDate, character, logical values in every column. — scan_data","text":"Scan data frame object determine percentage missing, numeric, Date, character, logical values every column.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scan a data frame object to determine the percentage of missing, numeric,\nDate, character, logical values in every column. — scan_data","text":"","code":"scan_data(data)"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scan a data frame object to determine the percentage of missing, numeric,\nDate, character, logical values in every column. — scan_data","text":"data input data frame","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scan a data frame object to determine the percentage of missing, numeric,\nDate, character, logical values in every column. — scan_data","text":"data frame columns input data 5 rows. rows represent percentage missing, numeric, date, character, logical values column.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/scan_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scan a data frame object to determine the percentage of missing, numeric,\nDate, character, logical values in every column. — scan_data","text":"","code":"scan_result <- scan_data(   data = readRDS(system.file(\"extdata\", \"messy_data.RDS\",                              package = \"cleanepi\")) )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize date variables — standardize_date","title":"Standardize date variables — standardize_date","text":"Standardize date variables","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize date variables — standardize_date","text":"","code":"standardize_date(   data,   date_column_name = NULL,   format = NULL,   timeframe = NULL,   check_timeframe = FALSE,   report = list(),   error_tolerance = 0.5 )"},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize date variables — standardize_date","text":"data input data frame date_column_name name date column interest. default: 'Date', 'DATE', 'date' format format date values date column timeframe expected first last date. See clean_data() helper details check_timeframe logical check whether dates fall within timeframe report object contains details result date columns standardization error_tolerance number 0 1 indicating proportion entries identified dates tolerated. See clean_data() helper details","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize date variables — standardize_date","text":"list 2 elements: input dataset date columns standardized report object type list contains details columns modified.","code":""},{"path":"https://epiverse-trace.github.io/cleanepi/reference/standardize_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize date variables — standardize_date","text":"","code":"dat <- standardize_date( data = readRDS(system.file(\"extdata\", \"test_df.RDS\", package = \"cleanepi\")), date_column_name = \"date_first_pcr_positive_test\", format = NULL, timeframe = NULL, check_timeframe = FALSE, report = list(), error_tolerance = 0.5 )"}]
